.. role:: red
.. role:: blue
.. role:: silde2
.. role:: red 
.. role:: blue 
.. role:: brown 
.. role:: remark
.. role:: worktodo
.. role:: slide
.. role:: slide1
.. role:: slide2
.. role:: slide3
.. role:: slidekp
.. role:: worktodo 

.. _appllevel: file:///C:/Didattica2025/mcrsv24/cargo2025/userDocs/cargoHistory.html#appllevel

===================================
cargosystem25
===================================

---------------------------------------
Requisiti
---------------------------------------

Progettare e costruire un :blue:`sistema software` per il carico/scarico di prodotti  
in modo automatizzato mediante robot-DDR su di un cargo navale.
I prodotti da caricare/scaricare devono essere stati precedentemente registrati su database.
 
Versione precedente: :ref:`Cargo24`

-----------------------------------------
Impostazioni preliminari
-----------------------------------------

- Analisi dei requisiti e del problema: individuazione dei :blue:`BoundedContexts` applicativi
- Introduzione alla Clean Architecture e ai principi SOLID
- Comunicazione tra componenti software in termini di :blue:`Business Concepts`
- Introduzione allo sviluppo agile con ``SCRUM``
- Vesro componenti con :brown:`loose-coupling e high-coesion`
- Idea di :blue:`DevOps` e sua evoluzione

-----------------------------------------
Progetto cargoproduct
-----------------------------------------

Costruzione di un applicativo Java che realizza la logica **CRUD** di gestione di prodotti in uno storage 
di diverse forme: inizialmente una semplice lista in memoria volatile, poi un database MongoDB.

        .. image::  ./_static/img/Cargo/ProductServiceLogic.JPG
           :align: center 
           :width: 60%  

+++++++++++++++++++++++++++++++++++++
Key-points cargoproduct
+++++++++++++++++++++++++++++++++++++

- Impostazione del Workspace Eclipse e di un progetto Gradle con relativo build file.
- Adpater (``AdapterStorage``) per rendere la logica applicativa indipendente dai dispositivi 
  usati per la persistenza.
- Predisposizione di ``AdapterStorage`` per  selezionare la memoria volatile o il database MongoDB
  usando variabili di ambiente. In assenza, uso del singleton ``StorageVolatile``.
- Testing in modo automatizzato con JUnit.
- Logging locale su file.
- Logging su ElasticSearch e Kibana, attivati come micorservizi ELK su Docker.
- Deployment mediante file ``cargoproduct-1.0.jar`` di un componente software che:

   - non è autonomo
   - produce effetti perchè esegue procedure specificate nell'interfaccia ``ICrudOps``
   - nel caso di memoria piena, esegue il metodo ``createProduct`` restituendo una stringa generica di errore 

 

-----------------------------------------
Progetto cargoserviceM2M
-----------------------------------------

Goal: rendere il sistema del :ref:`Progetto cargoproduct` disponibile in rete come (micro)servizio web 
per altri programmi  (interazione **M2M**).

        .. image::  ./_static/img/m2m/cargoserviceM2M.JPG
           :align: center 
           :width: 70%  

Appunti per lo sviluppo del prodotto: :ref:`cargoserviceM2M`

+++++++++++++++++++++++++++++++++++++
Key-points cargoserviceM2M
+++++++++++++++++++++++++++++++++++++

.. File cargoservice.properties per  selezionare la memoria volatile o il database MongoDB

- Uso di Spring e di un componente @RestController per rendere la logica applicativa accessibile via rete 
  ad altri programmi (interazione **M2M** :brown:`RESTful`).
- @RestController come componente di Spring che riceve richieste HTTP e risponde con oggetti JSON 
  invocando le operazioni dell'interfaccia ``ICrudOps`` realizzate dal singleton ``ProductServiceLogic``.
- Registrazione su Eureka del servizio con nome ``cargoserviceM2M``.
- Interazioni via HTTP (sincrone) e via Web-sockets (asincrone)
- Problema degli accessi concorrenti e come evitare la possibile duplicazione di prodotti.
- Sperimentazione di callers via HTTP e via Web-sockets (protocollo non limitato ai sistem Web)
- Distribuzione del prodotto software in forma di micro-servizio su Docker: 
  file *cargo2025\yamls\cargoServiceNoGui.yml* con variabili di ambiente che permettono di usare ``MongoDB``.
- Definizione di un caller (``PSLCallerHTTP``) che usa il servizio via HTTP e 
  di un caller (``PSLCallerWS``) che usa il servizio via Web-socket.
- L'astrazione :blue:`Interaction`, la libreria ``unibo.basicomm23-1.0``,
  il caller ``PSLCallerWSInteraction`` e
  il caller ``PSLDiscoverCallerHTTPInteraction`` 
  che include la scoperta (*discovery*) del servizio ``cargoserviceM2M`` mediante Eureka.
 

-----------------------------------------
Progetto cargoserviceM2MGui
-----------------------------------------

Goal: dotare il sistema del :ref:`Progetto cargoserviceM2M` di una GUI per la interazione uomo-macchina
(interazione **H2M**).

        .. image::  ./_static/img/m2m/cargoserviceM2MGui.jpg
           :align: center 
           :width: 60%  

Appunti per lo sviluppo del prodotto: :ref:`cargoserviceM2MGui`

+++++++++++++++++++++++++++++++++++++
Key-points cargoserviceM2MGui
+++++++++++++++++++++++++++++++++++++

- Uso di Spring e di un componente @Controller per rendere la logica applicativa accessibile via rete ad 
  esseri umani (interazione **H2M**).
- Realizzare una GUI in HTML e Javascript che invia comandi e riceve sia risposte sia aggiornamenti.
- Aggiornamento della pagina mediante Theamleaf
- Uso di form e dell'operatore ``fetch``  per l'invio di comandi come messaggi HTTP.
- Multiple UI, Aggregatori, API Gateway
- User experience
- BFF (Beckends Bor Frontends)
- Discovery del servizio ``cargoserviceM2M`` mediante Eureka
- Definizione di un caller (``GuiCallerHTTP``) che usa il servizio via HTTP sperimentando diversi tipi 
  di risposta da part del @Controller


-----------------------------------------
Sistema cargoserviceM2M 
-----------------------------------------

Goal: costruire il sistema facendo interagire due micro-servizi deployed su Docker

        .. image::  ./_static/img/m2m/cargoserviceM2MAndGui.jpg
           :align: center 
           :width: 60%  

- File *cargo2025\yamls\cargowareservice.yml* 

-----------------------------------------
Sistema cargoserviceM2M con eventi
-----------------------------------------

Goal: estendere il servizio del :ref:`Progetto cargoserviceM2M` in modo che possa emettere informazioni 
in forma di eventi percepibili e visualizzabili nella GUI del :ref:`Progetto cargoserviceM2MGui`


+++++++++++++++++++++++++++++++++++++++
Key-points cargoserviceM2M con eventi
+++++++++++++++++++++++++++++++++++++++

- I (micro)servizi non sono solo anemici CRUD-Wrappers
- I (micro)servizi sono concettualmente enti autonomi che possono emettere/percepire eventi e interagire tra loro
  con meccanismi asincroni (es. Web-sockets, publish-subscribe) di comunicazione.
- Il logging distribuito un meccanismo di monitoraggio e registrazione delle attività e non un meccanismo 
  di comunicazione utile a realizzare in modo genrale ed efficiente la comunicazione tra componenti software.
- Introduzione ai tipi logici di messggio `appllevel`_ (*I Protocolli e i dati*)
- Enterprise Integration Patterns (**EIP**)  


.. list-table::
    :widths: 15,35,50
    :width: 100%
    
    * - **Caratteristica**
      - **Broker**    
      - **WebSocket**
    * - Modello
      - Pub-Sub    
      - Bidirezionale, full-duplex
    * - Decoupling
      - Alto    
      - Basso
    * - Scalabilità
      - Alta    
      - Dipende dall'implementazione
    * - Flessibilità
      - Alta    
      - Più limitata
    * - Persistenza
      - Dipende dal broker   
      - Dipende dall'implementazione del server WebSocket
    * - Utilizzi tipici
      - Sistemi distribuiti, streaming, IoT    
      - Applicazioni in tempo reale, chat, notifiche push






===================================
cargosystem25 con attori qak
===================================

-----------------------------------------
Progetto cargoservice
-----------------------------------------

Goal: costruire un micorservizio basato sugli attori.

+++++++++++++++++++++++++++++++++++++
Key-points cargoservice
+++++++++++++++++++++++++++++++++++++

-----------------------------------------
Progetto cargoserviceQakGui
-----------------------------------------

Goal: dotare il sistema del :ref:`Progetto cargoservice` di una GUI per la interazione uomo-macchina.

+++++++++++++++++++++++++++++++++++++
Key-points cargoserviceQakGui
+++++++++++++++++++++++++++++++++++++

-----------------------------------------
Progetto cargoserviceM2MQakLocal
-----------------------------------------

+++++++++++++++++++++++++++++++++++++++
Key-points cargoserviceM2MQakLocal
+++++++++++++++++++++++++++++++++++++++

Goal: dotare il sistema del :ref:`Progetto cargoservice` di una GUI per la interazione uomo-macchina
evitando la comunicazione via rete tra il RestController della GUI e il serviceqak.